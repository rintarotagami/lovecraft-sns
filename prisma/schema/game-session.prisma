model GameSessionSummary {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  dueDate            DateTime
  communicationType  CommunicationType
  qualification      Qualification @default(ANYONE)
  scenarioId         String   @db.ObjectId
  scenario           ScenarioSummary @relation(fields: [scenarioId], references: [id])
  gms                GameSessionSummaryGM[] @relation
  applicants         GameSessionSummaryApplicant[] @relation
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  detail             GameSessionDetail?
  detailId           String?  @unique @db.ObjectId
}

model GameSessionDetail {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  gameSessionId      String   @unique @db.ObjectId
  description        String
  isMobileCompatible Boolean  @default(false)
  isSpectator        SpectatorType @default(ANYONE)
  ageLimit           Int?     @default(0)
  players            GameSessionDetailPlayer[]
  spectators         GameSessionDetailSpectator[]
  summary            GameSessionSummary @relation(fields: [gameSessionId], references: [id], onDelete: Cascade)
}

model GameSessionSummaryGM {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  gameSessionSummaryId String? @db.ObjectId
  userId               String? @db.ObjectId
  gameSessionSummary   GameSessionSummary? @relation(fields: [gameSessionSummaryId], references: [id], onDelete: SetNull)
  user                 User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@unique([gameSessionSummaryId, userId])
}

model GameSessionSummaryApplicant {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  gameSessionSummaryId String? @db.ObjectId
  userId               String? @db.ObjectId
  gameSessionSummary   GameSessionSummary? @relation(fields: [gameSessionSummaryId], references: [id], onDelete: SetNull)
  user                 User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@unique([gameSessionSummaryId, userId])
}

model GameSessionDetailPlayer {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  gameSessionDetailId String? @db.ObjectId
  userId              String? @db.ObjectId
  gameSessionDetail   GameSessionDetail? @relation(fields: [gameSessionDetailId], references: [id], onDelete: SetNull)
  user                User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@unique([gameSessionDetailId, userId])
}

model GameSessionDetailSpectator {
  id                   String @id @default(auto()) @map("_id") @db.ObjectId
  gameSessionDetailId String? @db.ObjectId
  userId              String? @db.ObjectId
  gameSessionDetail   GameSessionDetail? @relation(fields: [gameSessionDetailId], references: [id], onDelete: SetNull)
  user                User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  @@unique([gameSessionDetailId, userId])
}

enum CommunicationType {
  CHAT
  VC
  IN_PERSON
}

enum Qualification {
  ANYONE
  MUTUAL_FOLLOW
  COMMUNITY_MEMBER
}

enum SpectatorType {
  ANYONE
  MUTUAL_FOLLOW
  COMMUNITY_MEMBER
}